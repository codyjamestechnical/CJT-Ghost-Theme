{"version":3,"sources":["copy-to-clipboard.js"],"names":["copyToClipboard","elem","tagName","target","selectionStart","selectionEnd","document","getElementById","createElement","style","position","top","left","width","height","padding","border","outline","boxShadow","background","body","appendChild","textContent","activeElement","focus","setSelectionRange","value","length","successful","execCommand","msg","console","log","err","removeChild"],"mappings":"AAAA,SAASA,gBAAgBC,GAKrB,GAF+B,UAAjBA,EAAKC,SAAwC,aAAjBD,EAAKC,SAI3CC,EAASF,GACiBG,eACPH,EAAKI,iBACrB,CAGH,KADAF,EAASG,SAASC,eAVP,qBAWE,CACT,IAAIJ,EAASG,SAASE,cAAc,YAE9CL,EAAOM,MAAMC,SAAW,QACxBP,EAAOM,MAAME,IAAM,EACnBR,EAAOM,MAAMG,KAAO,EAIpBT,EAAOM,MAAMI,MAAQ,MACrBV,EAAOM,MAAMK,OAAS,MAGtBX,EAAOM,MAAMM,QAAU,EAGvBZ,EAAOM,MAAMO,OAAS,OACtBb,EAAOM,MAAMQ,QAAU,OACvBd,EAAOM,MAAMS,UAAY,OAGzBf,EAAOM,MAAMU,WAAa,cAGhBb,SAASc,KAAKC,YAAYlB,GAE9BA,EAAOmB,YAAcrB,EAAKqB,YAGXhB,SAASiB,cAC5BpB,EAAOqB,QACPrB,EAAOsB,kBAAkB,EAAGtB,EAAOuB,MAAMC,QAE3C,IACE,IAAIC,EAAatB,SAASuB,YAAY,QAClCC,EAAMF,EAAa,aAAe,eACtCG,QAAQC,IAAI,4BAA8BF,GAC1C,MAAOG,GACPF,QAAQC,IAAI,wBA6BZ,OA1BF1B,SAASc,KAAKc,YAAY/B,GA0BjByB","file":"copy-to-clipboard.js","sourcesContent":["function copyToClipboard(elem) {\n\t  // create hidden text element, if it doesn't already exist\n    var targetId = \"_hiddenCopyText_\";\n    var isInput = elem.tagName === \"INPUT\" || elem.tagName === \"TEXTAREA\";\n    var origSelectionStart, origSelectionEnd;\n    if (isInput) {\n        // can just use the original source element for the selection and copy\n        target = elem;\n        origSelectionStart = elem.selectionStart;\n        origSelectionEnd = elem.selectionEnd;\n    } else {\n        // must use a temporary form element for the selection and copy\n        target = document.getElementById(targetId);\n        if (!target) {\n            var target = document.createElement(\"textarea\");\n             // Place in top-left corner of screen regardless of scroll position.\n  target.style.position = 'fixed';\n  target.style.top = 0;\n  target.style.left = 0;\n\n  // Ensure it has a small width and height. Setting to 1px / 1em\n  // doesn't work as this gives a negative w/h on some browsers.\n  target.style.width = '2em';\n  target.style.height = '2em';\n\n  // We don't need padding, reducing the size if it does flash render.\n  target.style.padding = 0;\n\n  // Clean up any borders.\n  target.style.border = 'none';\n  target.style.outline = 'none';\n  target.style.boxShadow = 'none';\n\n  // Avoid flash of white box if rendered for any reason.\n  target.style.background = 'transparent';\n\n\n            document.body.appendChild(target);\n        }\n        target.textContent = elem.textContent;\n    }\n    // select the content\n    var currentFocus = document.activeElement;\n    target.focus();\n    target.setSelectionRange(0, target.value.length);\n    \n  try {\n    var successful = document.execCommand('copy');\n    var msg = successful ? 'successful' : 'unsuccessful';\n    console.log('Copying text command was ' + msg);\n  } catch (err) {\n    console.log('Oops, unable to copy');\n  }\n\n  document.body.removeChild(target);\n    \n    // // copy the selection\n    // var succeed;\n    // try {\n    // \t  succeed = document.execCommand(\"copy\");\n        \n    // } catch(e) {\n    //     succeed = false;\n    // }\n\n    // if (succeed) {\n    //   document.body.removeChild(textArea);\n    // }\n    // // restore original focus\n    // if (currentFocus && typeof currentFocus.focus === \"function\") {\n    //     currentFocus.focus();\n    // }\n    \n    // if (isInput) {\n    //     // restore prior selection\n    //     elem.setSelectionRange(origSelectionStart, origSelectionEnd);\n    // } else {\n    //     // clear temporary content\n    //     target.textContent = \"\";\n    // }\n    return successful;\n}"],"sourceRoot":"/source/"}